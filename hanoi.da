; ModuleID = 'test'
source_filename = "<string>"

@"Moving from _0" = unnamed_addr constant [13 x i8] c"Moving from \00"
@" to _0" = unnamed_addr constant [5 x i8] c" to \00"
@".\0A_0" = unnamed_addr constant [3 x i8] c".\0A\00"
@"Rings: _0" = unnamed_addr constant [8 x i8] c"Rings: \00"
@left_0 = unnamed_addr constant [5 x i8] c"left\00"
@right_0 = unnamed_addr constant [6 x i8] c"right\00"
@middle_0 = unnamed_addr constant [7 x i8] c"middle\00"

declare void @__writeString(i8*)

declare void @__writeChar(i8)

declare i64 @__strlen(i8*)

declare void @__writeInteger(i64)

declare i64 @__readInteger()

define void @main.hanoi.move({ { i64 }*, i64, i8*, i8*, i8* }* %parent_0, i8* %source_0, i8* %target_0) {
entry_0:
  %0 = alloca { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }
  %1 = getelementptr { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }, { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }* %0, i32 0, i32 0
  store { { i64 }*, i64, i8*, i8*, i8* }* %parent_0, { { i64 }*, i64, i8*, i8*, i8* }** %1
  %2 = getelementptr { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }, { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }* %0, i32 0, i32 1
  store i8* %source_0, i8** %2
  %3 = getelementptr { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }, { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }* %0, i32 0, i32 2
  store i8* %target_0, i8** %3
  %4 = bitcast i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"Moving from _0", i32 0, i32 0) to i8*
  call void @__writeString(i8* %4)
  %5 = getelementptr { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }, { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }* %0, i32 0, i32 1
  %6 = load i8*, i8** %5
  call void @__writeString(i8* %6)
  %7 = bitcast i8* getelementptr inbounds ([5 x i8], [5 x i8]* @" to _0", i32 0, i32 0) to i8*
  call void @__writeString(i8* %7)
  %8 = getelementptr { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }, { { { i64 }*, i64, i8*, i8*, i8* }*, i8*, i8* }* %0, i32 0, i32 2
  %9 = load i8*, i8** %8
  call void @__writeString(i8* %9)
  %10 = bitcast i8* getelementptr inbounds ([3 x i8], [3 x i8]* @".\0A_0", i32 0, i32 0) to i8*
  call void @__writeString(i8* %10)
  ret void
}

define void @main.hanoi({ i64 }* %parent_0, i64 %rings_0, i8* %source_0, i8* %target_0, i8* %auxiliary_0) {
entry_0:
  %0 = alloca { { i64 }*, i64, i8*, i8*, i8* }
  %1 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 0
  store { i64 }* %parent_0, { i64 }** %1
  %2 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 1
  store i64 %rings_0, i64* %2
  %3 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 2
  store i8* %source_0, i8** %3
  %4 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 3
  store i8* %target_0, i8** %4
  %5 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 4
  store i8* %auxiliary_0, i8** %5
  br label %if-check_0

if-check_0:                                       ; preds = %entry_0
  %6 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 1
  %7 = load i64, i64* %6
  %8 = icmp sge i64 %7, 1
  br i1 %8, label %if-do_0, label %if-merge_0

if-do_0:                                          ; preds = %if-check_0
  %9 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 1
  %10 = load i64, i64* %9
  %11 = sub i64 %10, 1
  %12 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 2
  %13 = load i8*, i8** %12
  %14 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 4
  %15 = load i8*, i8** %14
  %16 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 3
  %17 = load i8*, i8** %16
  %18 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 0
  %19 = load { i64 }*, { i64 }** %18
  call void @main.hanoi({ i64 }* %19, i64 %11, i8* %13, i8* %15, i8* %17)
  %20 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 2
  %21 = load i8*, i8** %20
  %22 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 3
  %23 = load i8*, i8** %22
  call void @main.hanoi.move({ { i64 }*, i64, i8*, i8*, i8* }* %0, i8* %21, i8* %23)
  %24 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 1
  %25 = load i64, i64* %24
  %26 = sub i64 %25, 1
  %27 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 4
  %28 = load i8*, i8** %27
  %29 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 3
  %30 = load i8*, i8** %29
  %31 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 2
  %32 = load i8*, i8** %31
  %33 = getelementptr { { i64 }*, i64, i8*, i8*, i8* }, { { i64 }*, i64, i8*, i8*, i8* }* %0, i32 0, i32 0
  %34 = load { i64 }*, { i64 }** %33
  call void @main.hanoi({ i64 }* %34, i64 %26, i8* %28, i8* %30, i8* %32)
  br label %if-exit_0

if-merge_0:                                       ; preds = %if-check_0
  br label %if-exit_0

if-exit_0:                                        ; preds = %if-merge_0, %if-do_0
  ret void
}

define void @main() {
entry_0:
  %0 = alloca { i64 }
  %1 = bitcast i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"Rings: _0", i32 0, i32 0) to i8*
  call void @__writeString(i8* %1)
  %ax_0 = getelementptr { i64 }, { i64 }* %0, i32 0, i32 0
  %index_0 = call i64 @__readInteger()
  store i64 %index_0, i64* %ax_0
  %2 = getelementptr { i64 }, { i64 }* %0, i32 0, i32 0
  %3 = load i64, i64* %2
  %4 = bitcast i8* getelementptr inbounds ([5 x i8], [5 x i8]* @left_0, i32 0, i32 0) to i8*
  %5 = bitcast i8* getelementptr inbounds ([6 x i8], [6 x i8]* @right_0, i32 0, i32 0) to i8*
  %6 = bitcast i8* getelementptr inbounds ([7 x i8], [7 x i8]* @middle_0, i32 0, i32 0) to i8*
  call void @main.hanoi({ i64 }* %0, i64 %3, i8* %4, i8* %5, i8* %6)
  ret void
}
